<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <!--Style cho nut o form Login va Lock-->
    <SolidColorBrush x:Key="NormalBrush" Color="{DynamicResource MainColor}" />
    <Color x:Key="MainColor">#348FBE</Color>

    <Style x:Key="mainSeparator" TargetType="{x:Type Separator}">
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="#EEE"/>
        <Setter Property="RenderTransform">
            <Setter.Value>
                <RotateTransform Angle="90"/>
            </Setter.Value>
        </Setter>
    </Style>

    <LinearGradientBrush x:Key="Background_Lockin" EndPoint="1,0.5" StartPoint="0,0.5">
        <GradientStop Color="#FF9E9E9E"/>
        <GradientStop Color="#FFF0F0F0" Offset="1"/>
    </LinearGradientBrush>

    <Style x:Key="btnLogin" TargetType="{x:Type Button}">
        <Setter Property="Height" Value="25"/>
        <Setter Property="Width" Value="50"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ON" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="OFF" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:01" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>

                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ON" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:01" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="OFF" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>

                        <Storyboard x:Key="PressOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ON" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
                                <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>

                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ON" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)">
                                <EasingDoubleKeyFrame KeyTime="0"  Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>

                        <Storyboard x:Key="PressOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ON" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>

                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ON" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)">
                                <EasingDoubleKeyFrame KeyTime="0"  Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>

                    <Grid  Height="25" Width="46">
                        <Rectangle x:Name="Rectangle_Lockin" RadiusX="1" RadiusY="1" Fill="Black" Margin="0" Stroke="Black" StrokeThickness="1"/>
                        <Image x:Name="OFF" Source ="/Nvs_Monitor;component/Images/Login/bg_button.png" HorizontalAlignment="Center" VerticalAlignment="Center" Opacity="1" Margin="1"/>
                        <Image x:Name="ON" Source="/Nvs_Monitor;component/Images/Login/bg_button_on.png" HorizontalAlignment="Center" VerticalAlignment="Center" Opacity="0" Margin="1">
                            <Image.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform/>
                                    <SkewTransform/>
                                    <RotateTransform/>
                                    <TranslateTransform/>
                                </TransformGroup>
                            </Image.RenderTransform>
                        </Image>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Cursor" Value="Hand"/>
                            <Setter TargetName="Rectangle_Lockin" Property="Effect">
                                <Setter.Value>
                                    <DropShadowEffect ShadowDepth="0" BlurRadius="10" Direction="0" Color="White" Opacity="1" />
                                </Setter.Value>
                            </Setter>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOff}"/>
                            </Trigger.ExitActions>
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource PressOn}"/>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource PressOff}"/>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--===================================================================================================-->
    <Style x:Key="ButtonImage" TargetType="{x:Type Button}">
        <Setter Property="Template" >
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <BulletDecorator HorizontalAlignment="Center" VerticalAlignment="Center">
                        <BulletDecorator.Bullet>
                            <Grid>
                                <Rectangle Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Fill="{TemplateBinding Background}"/>

                                <Path Visibility="Hidden" Width="25" Height="25" x:Name="xClose" 
                                          SnapsToDevicePixels="False"
                                          StrokeThickness="5"
                                          Data="M 0 0 L 25 25 M 0 25 L 25 0">
                                    <!--<Path.Stroke>
                                        <SolidColorBrush Color="#FFFF2121"/>
                                    </Path.Stroke>-->
                                </Path>
                            </Grid>
                        </BulletDecorator.Bullet>
                    </BulletDecorator>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="xClose" Property="Visibility" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--===================================================================================================-->
    <Style x:Key="btnConfirm" TargetType="{x:Type Button}">
        <Setter Property="Height" Value="20"/>
        <Setter Property="Width" Value="50"/>
    </Style>

    <!--===================================================================================================-->

    <!--button close-->
    <Style x:Key="btnClose" TargetType="{x:Type Button}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Effect">
                    <Setter.Value>
                        <DropShadowEffect BlurRadius="15" Color="#FF007DBA" ShadowDepth="0" Opacity="1"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Effect">
                    <Setter.Value>
                        <DropShadowEffect BlurRadius="15" Color="#FF910000" ShadowDepth="0" Opacity="1"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <!-- màu nền-->
                        <Ellipse Fill="{TemplateBinding Background}"/>
                        <!-- Refraction Layer tạo độ bóng cho button trên lớp này -->
                        <Rectangle x:Name="RefractionLayer">
                            <Rectangle.Fill>
                                <ImageBrush ImageSource="/Nvs_Monitor;component/Images/Login/exit.png"/>
                            </Rectangle.Fill>
                        </Rectangle>

                        <!-- ContentPresenter -->
                        <ContentPresenter Margin="0,2,0,0" HorizontalAlignment="Center" VerticalAlignment="Center"/>

                    </Grid>
                    <ControlTemplate.Triggers>
                        <!-- giu nguyen anh cua btn khi di chuot vao btn-->
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="RefractionLayer" Property="Fill">
                                <Setter.Value>
                                    <ImageBrush ImageSource="/Nvs_Monitor;component/Images/Login/exit.png"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--nut trong combobox cua form stockinfo_display-->
    <Style x:Key="btnArrow" TargetType="{x:Type Button}">
        <Setter Property="Height" Value="15"/>
        <Setter Property="Width" Value="21"/>
        <Setter Property="Template" Value="{DynamicResource btnArrowTemp}"/>
    </Style>

    <ControlTemplate x:Key="btnArrowTemp" TargetType="{x:Type Button}">
        <BulletDecorator HorizontalAlignment="Center" VerticalAlignment="Center">
            <BulletDecorator.Bullet>
                <Grid>
                    <Rectangle Name="rectangle" Width="21" Height="23" RadiusX="2" RadiusY="2">
                        <Rectangle.Fill>
                            <SolidColorBrush Color="#FF727272"/>
                        </Rectangle.Fill>
                    </Rectangle>
                    <Path Visibility="Visible" Width="7" Height="7" x:Name="Arrow" SnapsToDevicePixels="False"
                                          StrokeThickness="1" Data="M 0 0 L 3.5 6 L 7 0 Z" HorizontalAlignment="Center"
                                          VerticalAlignment="Center">
                        <Path.Fill>
                            <SolidColorBrush Color="#FF00AD00"/>
                        </Path.Fill>
                    </Path>
                </Grid>
            </BulletDecorator.Bullet>
        </BulletDecorator>

        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="Arrow" Property="Fill" Value="#FFD03434"/>
            </Trigger>

            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="Arrow" Property="Fill" Value="#FFA32626"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--===================================================================================================-->


    <Style x:Key="Close" TargetType="{x:Type Button}">
        <!--<Setter Property="Background">
            <Setter.Value>
                <ImageBrush ImageSource="/Monitor_TAM;component/Images/close.png"/>
            </Setter.Value>
        </Setter>-->
    </Style>

    <!--passwordbox form lock va login-->
    <Style x:Key="Login_PasswordBox" TargetType="{x:Type PasswordBox}">
        <!--<Setter Property="PasswordChar" Value="*"/>-->
        <Setter Property="Foreground" Value="#FFCCCCCC"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
    </Style>

    <!--textbox form login-->
    <Style x:Key="Test" TargetType="{x:Type TextBox}">
        <Setter Property="Foreground" Value="#FFCCCCCC"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid>
                        <Label HorizontalAlignment="Left" VerticalAlignment="Center" Padding="4,0,0,0" Foreground="Gray" FontStyle="Italic"
                               Content="{TemplateBinding Tag}" x:Name="lbl" Opacity="0"/>
                        <ScrollViewer Margin="3,0,0,0" x:Name="PART_ContentHost" Foreground="#FFCCCCCC" UseLayoutRounding="True"
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Text" Value="">
                            <Setter TargetName="lbl" Property="Opacity" Value="1"/>
                        </Trigger>
                        <Trigger Property="Text" Value="{x:Null}">
                            <Setter TargetName="lbl" Property="Opacity" Value="1"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--label form plash-->
    <Style x:Key="Labellogin" TargetType="{x:Type Label}">
        <Setter Property="Foreground" Value="#FF222222"/>
    </Style>

    <!--==================================================================-->
    <!--radiobutton cho frmIndexInfo_Create-->


    <Style TargetType="{x:Type RadioButton}" x:Key="RadioButton_Index">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="Background" Value="#FFF" />
        <Setter Property="BorderBrush" Value="#FFF" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <BulletDecorator Background="Transparent" x:Name="bulletDecorator">
                        <BulletDecorator.Bullet>
                            <Grid Width="16" Height="16">
                                <Ellipse Height="14" Margin="1" x:Name="Background" Width="14" Fill="{TemplateBinding Background}" 
                                         Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}" />
                                <Ellipse x:Name="CheckIcon" Opacity="0" Fill="#ADADAD" Stroke="#666" StrokeThickness="1"/>
                            </Grid>
                        </BulletDecorator.Bullet>
                        <ContentPresenter RecognizesAccessKey="True" Margin="5,0,0,0" />
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="false">
                            <Setter TargetName="CheckIcon" Property="Opacity" Value="0"/>
                        </Trigger>

                        <Trigger Property="IsChecked" Value="True" >
                            <Setter TargetName="CheckIcon" Property="Opacity" Value="1"/>
                        </Trigger>

                        <Trigger Property="IsPressed" Value="true">

                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Fill" TargetName="Background" Value="#FFF" />
                            <Setter Property="Stroke" TargetName="Background" Value="#666" />
                            <Setter Property="Opacity" TargetName="bulletDecorator" Value="1" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DataGridButton" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="70"/>
        <Setter Property="Foreground" Value="Cornsilk" />
        <Setter Property="FontFamily" Value="Arial" />
        <Setter Property="FontSize" Value="10.5" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimation Duration="00:00:00.1000000" Storyboard.TargetName="BackgroundOver" Storyboard.TargetProperty="Opacity" To="1" />
                            <DoubleAnimation Duration="00:00:00.1000000" Storyboard.TargetName="BackgroundOver_Highlight" Storyboard.TargetProperty="Opacity" To="0.65" />
                        </Storyboard>

                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimation Duration="00:00:00.4000000" Storyboard.TargetName="BackgroundOver" Storyboard.TargetProperty="Opacity" To="0" />
                            <DoubleAnimation Duration="00:00:00.4000000" Storyboard.TargetName="BackgroundOver_Highlight" Storyboard.TargetProperty="Opacity" To="0" />
                        </Storyboard>

                        <Storyboard x:Key="PressedOn">
                            <DoubleAnimation Duration="00:00:00.1000000" Storyboard.TargetName="BackgroundPressed" Storyboard.TargetProperty="Opacity" To="0.84" />
                            <DoubleAnimation Duration="00:00:00.1000000" Storyboard.TargetName="BackgoundPressed_Highlight" Storyboard.TargetProperty="Opacity" To="0.65" />
                        </Storyboard>

                        <Storyboard x:Key="PressedOff">
                            <DoubleAnimation Duration="00:00:00.4000000" Storyboard.TargetName="BackgroundPressed" Storyboard.TargetProperty="Opacity" To="0" />
                            <DoubleAnimation Duration="00:00:00.4000000" Storyboard.TargetName="BackgoundPressed_Highlight" Storyboard.TargetProperty="Opacity" To="0" />
                        </Storyboard>

                        <Storyboard x:Key="DisabledOn">
                            <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="DisabledVisualElement" Storyboard.TargetProperty="(UIElement.Visibility)">
                                <DiscreteObjectKeyFrame KeyTime="00:00:00.1000000" Value="{x:Static Visibility.Visible}" />
                            </ObjectAnimationUsingKeyFrames>

                            <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="DisabledOverlay" Storyboard.TargetProperty="(UIElement.Visibility)">
                                <DiscreteObjectKeyFrame KeyTime="00:00:00.1000000" Value="{x:Static Visibility.Visible}" />
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>

                        <Storyboard x:Key="FocusedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>

                        <Storyboard x:Key="FocusedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>

                    <Grid x:Name="Grid" Height="19">
                        <Border x:Name="BackgroundNorm" BorderThickness="1" CornerRadius="1" Background="{StaticResource NormalBrush}" BorderBrush="Bisque" />
                        <Border x:Name="BackgroundNorm_highlight" Margin="1" BorderBrush="{DynamicResource NormalHighlightBrush}" 
                                BorderThickness="0" CornerRadius="1" Opacity="0.65" />
                        <Border x:Name="BackgroundOver" BorderThickness="1" CornerRadius="1" Opacity="0" 
                                Background="{DynamicResource MouseOverBrush}" BorderBrush="{DynamicResource MouseOverBorderBrush}"/>
                        <Border x:Name="BackgroundOver_Highlight" Margin="1" BorderThickness="1,0,1,1" CornerRadius="1" 
                                Opacity="0" BorderBrush="{DynamicResource MouseOverHighlightBrush}"/>
                        <Border x:Name="BackgroundPressed" BorderThickness="1" CornerRadius="1" Opacity="0" 
                                Background="{DynamicResource PressedBrush}" BorderBrush="{DynamicResource PressedBorderBrush}"/>
                        <Border x:Name="BackgoundPressed_Highlight" Margin="1" BorderThickness="1,0,1,1" CornerRadius="1"
                                Opacity="0" BorderBrush="{DynamicResource PressedHighlightBrush}"/>
                        <Border x:Name="DisabledVisualElement" IsHitTestVisible="False" Background="{DynamicResource DisabledBackgroundBrush}" 
                                BorderBrush="{DynamicResource DisabledBorderBrush}" BorderThickness="1" Opacity="0" />
                        <ContentPresenter x:Name="contentPresenter" Content="{TemplateBinding Content}" 
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"/>
                        <Border x:Name="FocusVisualElement" Margin="0" BorderBrush="{DynamicResource FocusBrush}" 
                                BorderThickness="1" CornerRadius="1" IsHitTestVisible="False" Opacity="0" />
                        <Border x:Name="DefaultBorder" Margin="1" BorderBrush="{DynamicResource FocusBrush}" 
                                BorderThickness="1" CornerRadius="1" IsHitTestVisible="False" Opacity="0" />
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefault" Value="True">
                            <Setter Property="Opacity" TargetName="DefaultBorder" Value="1" />
                        </Trigger>

                        <Trigger Property="IsFocused" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="FocusedOn_BeginStoryboard" Storyboard="{StaticResource FocusedOn}" />
                            </Trigger.EnterActions>

                            <Trigger.ExitActions>
                                <BeginStoryboard x:Name="FocusedOff_BeginStoryboard" Storyboard="{StaticResource FocusedOff}" />
                            </Trigger.ExitActions>
                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard" />
                            </Trigger.ExitActions>

                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}" />
                            </Trigger.EnterActions>
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource PressedOff}" />
                            </Trigger.ExitActions>

                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource PressedOn}" />
                            </Trigger.EnterActions>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="True" />
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="#888"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>

    <ControlTemplate x:Key="EpxToggleButton" TargetType="ToggleButton">
        <Border Name="Border" CornerRadius="0,0,0,0" Background="Transparent" 
                BorderBrush="Transparent" BorderThickness="0,0,0,0" UseLayoutRounding="True">
            <Path Name="Arrow" Fill="#E0E0E0" HorizontalAlignment="Center" UseLayoutRounding="True"
                  VerticalAlignment="Center" Data="M 0 0 L 4 5 L 8 0 Z"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsMouseOver" Value="True">
                <Setter TargetName="Arrow" Property="Fill" Value="#333333"/>
                <Setter TargetName="Border" Property="Background" Value="#B9B9B9"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="Arrow" Property="Fill" Value="#999999"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="Arrow" Property="Data" Value="M 0 5 L 4 0 L 8 5 Z"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="Border" Property="Background" Value="#EEE" />
                <Setter TargetName="Border" Property="BorderBrush" Value="#AAA" />
                <Setter Property="Foreground" Value="#888"/>
                <Setter TargetName="Arrow" Property="Fill" Value="#EEE" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="EpxToggleButtonNon" TargetType="ToggleButton">
        <Border Name="Border" CornerRadius="0,0,0,0" Background="Transparent" 
                BorderBrush="Transparent" BorderThickness="0,1,0,1" UseLayoutRounding="True">
            <Path Name="Arrow" Fill="Transparent" HorizontalAlignment="Center" UseLayoutRounding="True"
                  VerticalAlignment="Center" Data="M 0 0 L 4 5 L 8 0 Z"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsMouseOver" Value="True">
                <Setter TargetName="Border" Property="BorderBrush" Value="#BDBDBD"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <!--<Setter TargetName="Arrow" Property="Fill" Value="#999999"/>-->
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="Arrow" Property="Data" Value="M 0 5 L 4 0 L 8 5 Z"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <!--<Setter TargetName="Border" Property="Background" Value="#EEE" />
                <Setter TargetName="Border" Property="BorderBrush" Value="#AAA" />
                <Setter Property="Foreground" Value="#888"/>
                <Setter TargetName="Arrow" Property="Fill" Value="#EEE" />-->
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="EpxListview" TargetType="Expander">
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="BorderBrush" Value="#B9B9B9"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Expander">
                    <ControlTemplate.Resources>
                        <ResourceDictionary>
                            <Storyboard x:Key="ExpandContent">
                                <DoubleAnimation Storyboard.TargetName="Content" Storyboard.TargetProperty="Height" 
                                                 From="0.0" To="{Binding ElementName=Content,Path=DesiredHeight}" 
                                                 Duration="0:0:1.0" />
                            </Storyboard>
                            <Storyboard x:Key="ContractContent">
                                <DoubleAnimation Storyboard.TargetName="Content" Storyboard.TargetProperty="Height" 
                                                 From="{Binding ElementName=Content,Path=DesiredHeight}" 
                                                 To="0.0" Duration="0:0:1.0" />
                            </Storyboard>
                        </ResourceDictionary>
                    </ControlTemplate.Resources>
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Name="ContentRow" Height="0"/>
                        </Grid.RowDefinitions>
                        <Border Name="Border" Grid.Row="0" Background="{TemplateBinding Background}" UseLayoutRounding="True"
                                BorderBrush="#999999" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="0,0,0,0" >
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="20" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <ToggleButton Grid.Column="0" IsChecked="{Binding Path=IsExpanded,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}" 
                                              OverridesDefaultStyle="True" Template="{StaticResource EpxToggleButton}" Background="#F0F0F0" />
                                <ContentPresenter Grid.Column="1"  Margin="5,0,0,0" ContentSource="Header" RecognizesAccessKey="True" />
                            </Grid>
                        </Border>
                        <Border Name="Content" Grid.Row="1" Background="{TemplateBinding Background}" UseLayoutRounding="True"
                                BorderBrush="#999999" BorderThickness="0,0,0,0" CornerRadius="0,0,0,0" Margin="0,0,0,0">
                            <ContentPresenter x:Name="expanderContent" Margin="0,4,4,4" UseLayoutRounding="True"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="ContentRow" Property="Height" Value="{Binding ElementName=Content,Path=DesiredHeight}" />
                            <Setter TargetName="Content" Property="BorderThickness" Value="0,1,0,1"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="#EEE" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="#AAA" />
                            <Setter Property="Foreground" Value="#888"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Label Content="{Binding}" FontWeight="SemiBold" VerticalAlignment="Center" VerticalContentAlignment="Center" Margin="0,-2,0,0"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="EpxFullListviewHeader" TargetType="Expander">
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="BorderBrush" Value="#B9B9B9"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Expander">
                    <ControlTemplate.Resources>
                        <ResourceDictionary>
                            <Storyboard x:Key="ExpandContent">
                                <DoubleAnimation Storyboard.TargetName="Content" Storyboard.TargetProperty="Height" 
                                                 From="0.0" To="{Binding ElementName=Content,Path=DesiredHeight}" 
                                                 Duration="0:0:1.0" />
                            </Storyboard>
                            <Storyboard x:Key="ContractContent">
                                <DoubleAnimation Storyboard.TargetName="Content" Storyboard.TargetProperty="Height" 
                                                 From="{Binding ElementName=Content,Path=DesiredHeight}" 
                                                 To="0.0" Duration="0:0:1.0" />
                            </Storyboard>
                        </ResourceDictionary>
                    </ControlTemplate.Resources>
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Name="ContentRow" Height="0"/>
                        </Grid.RowDefinitions>
                        <Border Name="Border" Grid.Row="0" Background="{TemplateBinding Background}" UseLayoutRounding="True"
                                BorderBrush="#999999" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="0,0,0,0" >
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="20" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <Border Name="BorderToggleButton" Grid.Column="0" Background="Transparent">
                                    <ToggleButton IsChecked="{Binding Path=IsExpanded,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}" 
                                              OverridesDefaultStyle="True" Template="{StaticResource EpxToggleButton}" Background="#F0F0F0" />
                                </Border>
                                <ContentPresenter Grid.Column="1"  Margin="5,0,0,0" ContentSource="Header" RecognizesAccessKey="True" />

                            </Grid>
                        </Border>
                        <ToggleButton Grid.Row="0" IsChecked="{Binding Path=IsExpanded,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}" 
                                      OverridesDefaultStyle="True" Template="{StaticResource EpxToggleButtonNon}" Background="#F0F0F0" />
                        <Border Name="Content" Grid.Row="1" Background="{TemplateBinding Background}" UseLayoutRounding="True"
                                BorderBrush="#999999" BorderThickness="0,0,0,0" CornerRadius="0,0,0,0" Margin="0,0,0,0">
                            <ContentPresenter x:Name="expanderContent" Margin="0,4,4,4" UseLayoutRounding="True"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="ContentRow" Property="Height" Value="{Binding ElementName=Content,Path=DesiredHeight}" />
                            <Setter TargetName="Content" Property="BorderThickness" Value="0"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="#EEE" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="#AAA" />
                            <Setter Property="Foreground" Value="#888"/>
                        </Trigger>
                        <!--<Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="BorderToggleButton" Value="#B9B9B9"/>
                        </Trigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Label Content="{Binding}" FontWeight="SemiBold" VerticalAlignment="Center" VerticalContentAlignment="Center" Margin="0,-2,0,0"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>